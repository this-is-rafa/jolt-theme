//Media Query
@mixin mq($width, $type: min) {
  @if map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);
    @if $type == max {
        $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
        @content;
    }
  }
}

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }

    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }

      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  } @else {
    font-size: $fs-font-size;
  }
}

// Lighten a color
@function lighten($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Darken a color
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

//Z-Index
@function z($key) {
  @return map-get($z-index, $key);
}

//Range Slider
@mixin track($width, $height, $color) {
  box-sizing: border-box;
  border: none;
  width: $width; height: $height;
  background: $color;
}

@mixin thumb($diameter, $color) {
  box-sizing: border-box;
  border: none;
  width: $diameter; height: $diameter;
  border-radius: 50%;
  background: $color;
}